# +=====================================================================+
# |                          CERTEUS                                    |
# +=====================================================================+
# | FILE: .github/workflows/ci.yml                                      |
# | ROLE: Continuous Integration pipeline for Control & Certeus         |
# | PLIK: .github/workflows/ci.yml                                      |
# | ROLA: Pipeline ciƒÖg≈Çej integracji dla Control i Certeus             |
# +=====================================================================+

# PL: Workflow CI z testami, lintingiem i bramkami jako≈õci zgodnie ze standardem v3.0
# EN: CI workflow with tests, linting and quality gates according to standard v3.0

name: Control CI

on:
  push:
    branches: [main, work/daily]
  pull_request:
    branches: [main, work/daily]

jobs:
  coding-standard-check:
    name: "Coding Standard v3.0 Compliance"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]  # Use dependency-groups from pyproject.toml

      - name: Check ForgeHeader v3 compliance
        run: |
          python scripts/check_headers.py

  test-control:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install control dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          # Install dev dependencies manually
          pip install ruff pytest pytest-cov pre-commit mypy hypothesis

      - name: Run control tests with coverage
        run: |
          pytest test/ -v --cov=pkg.control --cov-report=term-missing --cov-fail-under=40

      - name: Enterprise Code Quality Check
        run: |
          echo "üîç Running Enterprise Quality Checks (Standard v3.0)..."
          ruff check . --statistics --ignore=T201,TRY300,S607,PERF401,W293,RUF100,EXE001,F401,PTH201
          ruff format --check .

      - name: Type checking with mypy
        run: |
          # This step now correctly fails the build on type errors.
          mypy pkg/control/

  test-certeus:
    runs-on: ubuntu-latest
    name: "Test: Certeus (Smoke)"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install certeus dependencies and run tests
        # This step now correctly fails the build on test failures.
        run: |
          cd workspaces/certeus
          python -m pip install --upgrade pip
          # Assuming a dev requirements file exists for test dependencies
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; else pip install -r requirements.txt; fi
          pip install pytest hypothesis cryptography httpx
          pytest -q tests/ # Fails the job if tests fail

  integration:
    runs-on: ubuntu-latest
    needs: [test-control, test-certeus] # Runs after both control and certeus tests pass

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install control
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          # Install basic dependencies for CLI testing
          pip install pytest

      - name: Test integration
        # This is a more meaningful integration test.
        # It checks if the 'control' CLI can correctly identify the 'certeus' submodule.
        run: |
          echo "--- Running basic CLI commands ---"
          control health | grep "OK"
          control status | grep "OK"
          echo "--- Verifying project listing ---"
          control project list | grep "certeus"
          control project path certeus | grep "workspaces/certeus"

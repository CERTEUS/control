# +-------------------------------------------------------------+
# |                          CERTEUS                            |
# +-------------------------------------------------------------+
# | FILE: docs/openapi/certeus.v1.yaml                        |
# | ROLE: Project YAML manifest.                                |
# | PLIK: docs/openapi/certeus.v1.yaml                        |
# | ROLA: Manifest YAML projektu.                               |
# +-------------------------------------------------------------+

openapi: 3.0.3
info:
  title: CERTEUS API
  version: "1.0.0"
servers:
  - url: http://localhost:8081
externalDocs:
  description: Additional resources (endpoints, cURL, runbooks)
  url: https://github.com/CERTEUS/certeus/tree/main/docs
paths:
  /v1/cfe/geodesic:
    post:
      summary: Compute legal geodesic (CFE)
      tags: [CFE]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                case: { type: string, description: Optional case identifier }
                facts: { type: object, additionalProperties: true }
                norms: { type: object, additionalProperties: true }
            examples:
              example:
                value: { case: "CER-LEX-7", facts: {}, norms: {} }
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  path: { type: array, items: { type: string } }
                  geodesic_action: { type: number }
                  subject: { type: string, nullable: true }
  /v1/cfe/horizon:
    post:
      summary: Compute legal horizon (CFE)
      tags: [CFE]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                case: { type: string }
                lock: { type: boolean }
                domain:
                  type: string
                  enum: [LEX, FIN, MED, SEC, CODE]
                  description: Optional domain context
                severity:
                  type: string
                  enum: [low, medium, high, critical]
                  description: Optional severity for heuristic lock
            examples:
              example:
                value: { case: "MED-CASE-CRIT-1", domain: "MED", severity: "critical" }
      responses:
        "200": { description: ok }
  /v1/cfe/lensing:
    get:
      summary: Lensing map (CFE)
      tags: [CFE]
      parameters:
        - in: query
          name: domain
          schema: { type: string, enum: [LEX, FIN, MED, SEC, CODE] }
          required: false
          description: Optional domain context
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  lensing_map:
                    type: object
                    additionalProperties: { type: number }
                  critical_precedents: { type: array, items: { type: string } }
                  domain: { type: string }
  /v1/qtm/init_case:
    post:
      summary: Initialize QTMP case predistribution
      tags: [QTMP]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                case: { type: string }
                state_uri: { type: string }
                basis:
                  type: array
                  items: { type: string }
            examples:
              example:
                summary: Minimal
                value: { case: "LEX-QTMP-1", basis: ["ALLOW","DENY","ABSTAIN"], state_uri: "psi://uniform" }
      responses:
        "200":
          description: Predistribution created
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  predistribution:
                    type: array
                    items:
                      type: object
                      properties: { state: { type: string }, p: { type: number } }
  /v1/qtm/measure:
    post:
      summary: Perform QTMP measurement
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmMeasureRequest'
            examples:
              example:
                value: { operator: "L", case: "LEX-QTMP-1", source: "ui" }
      responses:
        "200":
          description: Measurement result
          headers:
            X-CERTEUS-PCO-qtm.collapse_event:
              description: JSON snippet with operator, verdict and channel
              schema: { type: string }
            X-CERTEUS-PCO-qtm.predistribution[]:
              description: JSON array of predistribution items
              schema: { type: string }
            X-CERTEUS-PCO-qtmp.priorities:
              description: JSON map of operator priorities
              schema: { type: string }
            X-CERTEUS-PCO-correlation.cfe_qtmp:
              description: Scalar correlation value between CFE and QTMP
              schema: { type: string }
            X-CERTEUS-PCO-qtm.collapse_prob:
              description: Collapse probability for selected verdict
              schema: { type: string }
            X-CERTEUS-PCO-qtm.collapse_latency_ms:
              description: Collapse latency in milliseconds
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmMeasureResponse'
  /v1/qtm/commutator:
    post:
      summary: Compute commutator (QTMP)
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmCommutatorRequest'
      responses:
        "200":
          description: Value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmCommutatorResponse'
  /v1/qtm/find_entanglement:
    post:
      summary: Find variable entanglement
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmFindEntanglementRequest'
      responses:
        "200":
          description: Entanglement pairs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmFindEntanglementResponse'
  /v1/qtm/measure_sequence:
    post:
      summary: Measure a sequence of operators (QTMP)
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmSequenceRequest'
            examples:
              example:
                value: { operators: ["L","T","W"], case: "LEX-QTMP-1" }
      responses:
        "200":
          description: Sequence result
          headers:
            X-CERTEUS-PCO-qtm.sequence:
              description: JSON array with operator sequence
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmSequenceResponse'
  /v1/qtm/state:
    post:
      summary: Set QTMP state (basis + probabilities)
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmStateIn'
            examples:
              example:
                value: { case: "LEX-QTMP-1", basis: ["ALLOW","DENY","ABSTAIN"], probs: [0.5,0.3,0.2] }
      responses:
        "200":
          description: State set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmStateOut'
  /v1/qtm/state/{case}:
    get:
      summary: Get QTMP state for case
      tags: [QTMP]
      parameters:
        - in: path
          name: case
          required: true
          schema: { type: string }
      responses:
        "200":
          description: State
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmStateOut'
    delete:
      summary: Delete QTMP state for case
      tags: [QTMP]
      parameters:
        - in: path
          name: case
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmDeleteResult'
  /v1/qtm/history/{case}:
    get:
      summary: Get QTMP measurement history for case
      tags: [QTMP]
      parameters:
        - in: path
          name: case
          required: true
          schema: { type: string }
        - in: query
          name: offset
          required: false
          schema: { type: integer, default: 0 }
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 100 }
        - in: query
          name: operator
          required: false
          schema: { type: string }
        - in: query
          name: verdict
          required: false
          schema: { type: string }
        - in: query
          name: sort
          required: false
          schema: { type: string, enum: [asc, desc], default: asc }
      responses:
        "200":
          description: History
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmHistoryOut'
  /v1/qtm/operators:
    get:
      summary: List QTMP operators and eigenvalues
      tags: [QTMP]
      responses:
        "200":
          description: Operators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmOperatorsOut'
  /v1/qtm/uncertainty:
    get:
      summary: QTMP uncertainty lower bound (L_T)
      tags: [QTMP]
      responses:
        "200":
          description: Lower bound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmUncertaintyOut'
  /v1/qtm/expectation:
    post:
      summary: Expectation value of operator for case
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmExpectationRequest'
      responses:
        "200":
          description: Expectation value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmExpectationOut'
  /v1/qtm/decoherence:
    post:
      summary: Configure decoherence channel for case
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmDecoherenceRequest'
            examples:
              example:
                value: { case: "LEX-QTMP-1", channel: "dephasing", gamma: 0.2 }
      responses:
        "200":
          description: Configuration set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmDecoherenceResponse'
  /v1/qtm/commutator_expectation:
    post:
      summary: Expected commutator magnitude for case distribution
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmCommutatorExpRequest'
      responses:
        "200":
          description: Value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmCommutatorResponse'
  /v1/qtm/preset:
    post:
      summary: Save Operator Composer preset for case
      tags: [QTMP]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QtmPresetIn'
      responses:
        "200":
          description: Preset saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmPresetOut'
  /v1/qtm/preset/{case}:
    get:
      summary: Get Operator Composer preset for case
      tags: [QTMP]
      parameters:
        - in: path
          name: case
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Preset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmPresetOut'
    delete:
      summary: Delete Operator Composer preset for case
      tags: [QTMP]
      parameters:
        - in: path
          name: case
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QtmDeleteResult'
  /v1/qtm/presets:
    get:
      summary: List Operator Composer presets
      tags: [QTMP]
      responses: { "200": { description: ok } }
  /v1/devices/horizon_drive/plan:
    post:
      summary: Plan evidence horizon (HDE)
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/qoracle/expectation:
    post:
      summary: Optimize expectation via qOracle
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/entangle:
    post:
      summary: Create entanglement certificate
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/devices/chronosync/reconcile:
    post:
      summary: Reconcile chronosync coordinates
      tags: [Devices]
      responses: { "200": { description: ok } }
  /v1/upn/register:
    post:
      summary: Register UPN
      tags: [UPN]
      responses: { "200": { description: ok } }
  /v1/upn/revoke:
    post:
      summary: Revoke UPN
      tags: [UPN]
      responses: { "200": { description: ok } }
  /v1/dr/replay:
    post:
      summary: Decision Replay
      tags: [DR]
      responses: { "200": { description: ok } }
  /v1/dr/recall:
    post:
      summary: Decision Recall
      tags: [DR]
      responses: { "200": { description: ok } }
  /v1/proofgate/publish:
    post:
      summary: Publication decision (ProofGate)
      tags: [ProofGate]
      responses: { "200": { description: ok } }
  /v1/pco/bundle:
    post:
      summary: Create and publish ProofBundle (v0.2)
      tags: [PCO]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rid, smt2_hash, lfsc]
              properties:
                rid: { type: string }
                smt2_hash: { type: string, minLength: 64, maxLength: 64 }
                lfsc: { type: string }
                drat: { type: string, nullable: true }
                merkle_proof:
                  type: array
                  items:
                    type: object
                    properties: { sibling: { type: string }, dir: { type: string, enum: [L, R] } }
            examples:
              minimal:
                summary: Minimal request
                value:
                  rid: "case-001"
                  smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                  lfsc: "(lfsc proof)"
                  merkle_proof: []
      responses:
        "200":
          description: ProofBundle published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProofBundleV0_2'
              examples:
                example:
                  summary: Minimal ProofBundle response (truncated)
                  value:
                    version: "0.2"
                    case_id: "case-001"
                    rid: "case-001"
                    smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    lfsc: "(lfsc proof)"
                    merkle_proof: []
                    signatures: [{ role: producer, alg: ed25519, key_id: "kid123", signature: "b64u..." }]
                    risk: { ece: 0, brier: 0, p95_latency_ms: 0, abstain_rate: 0 }
                    status: "PENDING"
  /pco/public/{case_id}:
    get:
      summary: Public payload of ProofBundle (zero PII)
      parameters:
        - in: path
          name: case_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Public PCO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicPCO'
              examples:
                example:
                  value:
                    rid: "case-001"
                    smt2_hash: "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
                    lfsc: "(lfsc proof)"
                    merkle_proof: []
                    signature: "b64u..."
  /.well-known/jwks.json:
    get:
      summary: JWKS
      tags: [System]
      responses: { "200": { description: ok } }
  /metrics:
    get:
      summary: Prometheus metrics
      tags: [System]
      responses:
        "200": { description: ok }
  /v1/sources/cache:
    post:
      summary: Cache a legal source by URI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [uri]
              properties:
                uri: { type: string }
      responses:
        "200":
          description: Cached source
          content:
            application/json:
              schema:
                type: object
                properties:
                  uri: { type: string }
                  digest: { type: string }
                  path: { type: string }
                  retrieved_at: { type: string }
  /v1/proofgate/publish:
    post:
      summary: Publication decision (ProofGate)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pco: { $ref: '#/components/schemas/ProofBundleV0_2' }
                policy: { type: object }
                budget_tokens: { type: integer }
      responses:
        "200":
          description: Decision
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN] }
                  pco: { type: object }
                  ledger_ref: { type: string }
  /v1/packs:
    get:
      summary: List packs
      tags: [Packs]
      responses: { "200": { description: ok } }
  /v1/packs/handle:
    post:
      summary: Handle pack action
      tags: [Packs]
      responses: { "200": { description: ok } }
  /v1/ledger/{case_id}:
    get:
      summary: Ledger head for case
      tags: [Ledger]
      parameters:
        - name: case_id
          in: path
          required: true
          schema: { type: string }
      responses: { "200": { description: ok } }
  /v1/boundary/reconstruct:
    post:
      summary: Reconstruct boundary state
      tags: [Boundary]
      responses: { "200": { description: ok } }
components:
  schemas:
    ProofBundleV0_2:
      description: Schema aligned with services/api_gateway/schemas/proofbundle_v0.2.json
      type: object
      required: [version, case_id, created_at, jurisdiction, claims, sources, risk, signatures, reproducibility, status]
      properties:
        version: { type: string, enum: ["0.2"] }
        case_id: { type: string }
        created_at: { type: string, format: date-time }
        jurisdiction:
          type: object
          properties:
            country: { type: string }
            domain: { type: string }
        claims:
          type: array
          items:
            type: object
        sources:
          type: array
          items:
            type: object
        derivations:
          type: array
          items:
            type: object
        computations:
          type: array
          items:
            type: object
        risk:
          type: object
          properties:
            ece: { type: number }
            brier: { type: number }
            p95_latency_ms: { type: number }
            abstain_rate: { type: number }
        ledger:
          type: object
        signatures:
          type: array
          items:
            type: object
        reproducibility:
          type: object
        attachments:
          type: array
          items:
            type: object
        status:
          type: string
          enum: [PUBLISH, CONDITIONAL, PENDING, ABSTAIN]
    PublicPCO:
      type: object
      properties:
        rid: { type: string }
        smt2_hash: { type: string }
        lfsc: { type: string }
        drat: { type: string }
        merkle_proof:
          type: array
          items:
            type: object
            properties: { sibling: { type: string }, dir: { type: string } }
        signature: { type: string }
    QtmMeasureRequest:
      type: object
      required: [operator]
      properties:
        operator: { type: string, description: "One of W/I/C/L/T" }
        case: { type: string }
        source: { type: string }
        basis:
          type: array
          items: { type: string }
    QtmMeasureResponse:
      type: object
      properties:
        verdict: { type: string }
        p: { type: number }
        collapse_log: { type: object }
        uncertainty_bound: { type: object }
        latency_ms: { type: number }
    QtmSequenceStep:
      type: object
      properties:
        operator: { type: string }
        verdict: { type: string }
        p: { type: number }
    QtmSequenceRequest:
      type: object
      required: [operators]
      properties:
        operators:
          type: array
          items: { type: string }
        case: { type: string }
        basis:
          type: array
          items: { type: string }
        no_collapse: { type: boolean }
    QtmSequenceResponse:
      type: object
      properties:
        steps:
          type: array
          items: { $ref: '#/components/schemas/QtmSequenceStep' }
        final_latency_ms: { type: number }
        uncertainty_bound: { type: object }
    QtmStateIn:
      type: object
      required: [case, basis, probs]
      properties:
        case: { type: string }
        psi: { type: string }
        basis:
          type: array
          items: { type: string }
        probs:
          type: array
          items: { type: number }
    QtmPredistribItem:
      type: object
      properties: { state: { type: string }, p: { type: number } }
    QtmStateOut:
      type: object
      properties:
        case: { type: string }
        psi: { type: string }
        basis:
          type: array
          items: { type: string }
        predistribution:
          type: array
          items: { $ref: '#/components/schemas/QtmPredistribItem' }
    QtmDeleteResult:
      type: object
      properties: { ok: { type: boolean } }
    QtmHistoryEvent:
      type: object
      properties:
        operator: { type: string }
        verdict: { type: string }
        p: { type: number }
    QtmHistoryOut:
      type: object
      properties:
        case: { type: string }
        history:
          type: array
          items: { $ref: '#/components/schemas/QtmHistoryEvent' }
        total: { type: integer }
        offset: { type: integer }
        limit: { type: integer }
    QtmOperatorsOut:
      type: object
      properties:
        operators:
          type: object
    QtmUncertaintyOut:
      type: object
      properties: { lower_bound: { type: number } }
    QtmExpectationRequest:
      type: object
      required: [case, operator]
      properties:
        case: { type: string }
        operator: { type: string }
    QtmExpectationOut:
      type: object
      properties: { value: { type: number } }
    QtmDecoherenceRequest:
      type: object
      required: [channel]
      properties:
        case: { type: string }
        channel: { type: string, enum: [dephasing, depolarizing, damping] }
        gamma: { type: number }
    QtmDecoherenceResponse:
      type: object
      properties:
        ok: { type: boolean }
        case: { type: string }
        channel: { type: string }
        gamma: { type: number }
    QtmCommutatorRequest:
      type: object
      required: [A, B]
      properties:
        A: { type: string }
        B: { type: string }
    QtmCommutatorResponse:
      type: object
      properties: { value: { type: number } }
    QtmCommutatorExpRequest:
      type: object
      required: [case, A, B]
      properties:
        case: { type: string }
        A: { type: string }
        B: { type: string }
    QtmFindEntanglementRequest:
      type: object
      required: [variables]
      properties:
        variables:
          type: array
          items: { type: string }
    QtmFindEntanglementResponse:
      type: object
      properties:
        pairs:
          type: array
          items:
            type: array
            items: { type: string }
            minItems: 2
            maxItems: 2
        mi: { type: number }
        negativity: { type: number }
